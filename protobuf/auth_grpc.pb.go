// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: auth.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AUTHClient is the client API for AUTH service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AUTHClient interface {
	AuthLogin(ctx context.Context, opts ...grpc.CallOption) (AUTH_AuthLoginClient, error)
}

type aUTHClient struct {
	cc grpc.ClientConnInterface
}

func NewAUTHClient(cc grpc.ClientConnInterface) AUTHClient {
	return &aUTHClient{cc}
}

func (c *aUTHClient) AuthLogin(ctx context.Context, opts ...grpc.CallOption) (AUTH_AuthLoginClient, error) {
	stream, err := c.cc.NewStream(ctx, &AUTH_ServiceDesc.Streams[0], "/auth.AUTH/AuthLogin", opts...)
	if err != nil {
		return nil, err
	}
	x := &aUTHAuthLoginClient{stream}
	return x, nil
}

type AUTH_AuthLoginClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type aUTHAuthLoginClient struct {
	grpc.ClientStream
}

func (x *aUTHAuthLoginClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aUTHAuthLoginClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AUTHServer is the server API for AUTH service.
// All implementations must embed UnimplementedAUTHServer
// for forward compatibility
type AUTHServer interface {
	AuthLogin(AUTH_AuthLoginServer) error
	mustEmbedUnimplementedAUTHServer()
}

// UnimplementedAUTHServer must be embedded to have forward compatible implementations.
type UnimplementedAUTHServer struct {
}

func (UnimplementedAUTHServer) AuthLogin(AUTH_AuthLoginServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthLogin not implemented")
}
func (UnimplementedAUTHServer) mustEmbedUnimplementedAUTHServer() {}

// UnsafeAUTHServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AUTHServer will
// result in compilation errors.
type UnsafeAUTHServer interface {
	mustEmbedUnimplementedAUTHServer()
}

func RegisterAUTHServer(s grpc.ServiceRegistrar, srv AUTHServer) {
	s.RegisterService(&AUTH_ServiceDesc, srv)
}

func _AUTH_AuthLogin_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AUTHServer).AuthLogin(&aUTHAuthLoginServer{stream})
}

type AUTH_AuthLoginServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type aUTHAuthLoginServer struct {
	grpc.ServerStream
}

func (x *aUTHAuthLoginServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aUTHAuthLoginServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AUTH_ServiceDesc is the grpc.ServiceDesc for AUTH service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AUTH_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AUTH",
	HandlerType: (*AUTHServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AuthLogin",
			Handler:       _AUTH_AuthLogin_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "auth.proto",
}
